-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package landschaften-service
@version 0.1.0.0

module Domain
newtype ConceptNamesResponse
ConceptNamesResponse :: [String] -> ConceptNamesResponse
[conceptNames] :: ConceptNamesResponse -> [String]
newtype ConceptNameRow
ConceptNameRow :: String -> ConceptNameRow
[conceptName] :: ConceptNameRow -> String
newtype ArtistsResponse
ArtistsResponse :: [String] -> ArtistsResponse
[artists] :: ArtistsResponse -> [String]
newtype PaintingsResponse
PaintingsResponse :: [Painting] -> PaintingsResponse
[paintings] :: PaintingsResponse -> [Painting]
data Painting
Painting :: String -> String -> String -> Genre -> School -> String -> [Concept] -> Painting
[author] :: Painting -> String
[title] :: Painting -> String
[jpg] :: Painting -> String
[genre] :: Painting -> Genre
[school] :: Painting -> School
[timeframe] :: Painting -> String
[concepts] :: Painting -> [Concept]
data ConceptRow
ConceptRow :: String -> ConceptRow
[conceptColumn] :: ConceptRow -> String
data PaintingRow
PaintingRow :: String -> String -> String -> Genre -> School -> String -> String -> PaintingRow
[prAuthor] :: PaintingRow -> String
[prTitle] :: PaintingRow -> String
[prJpg] :: PaintingRow -> String
[prGenre] :: PaintingRow -> Genre
[prSchool] :: PaintingRow -> School
[prTimeframe] :: PaintingRow -> String
[prConcepts] :: PaintingRow -> String
data Concept
Concept :: String -> Float -> Concept
[name] :: Concept -> String
[value] :: Concept -> Float
parseConcepts :: Value -> Parser [Concept]
optimisticDecodeConcepts :: String -> [Concept]
paintingRowToPainting :: PaintingRow -> Painting
data Genre
Mythological :: Genre
Interior :: Genre
Landscape :: Genre
Study :: Genre
GenreGenre :: Genre
Religious :: Genre
OtherGenre :: Genre
StillLife :: Genre
Historical :: Genre
Portrait :: Genre
data School
German :: School
Italian :: School
Danish :: School
Flemish :: School
Dutch :: School
Netherlandish :: School
Swiss :: School
Other :: School
Russian :: School
English :: School
Austrian :: School
Scottish :: School
Bohemian :: School
French :: School
Spanish :: School
Belgian :: School
Hungarian :: School
American :: School
Polish :: School
Norwegian :: School
Swedish :: School
Irish :: School
Finnish :: School
Portuguese :: School
Greek :: School
Catalan :: School
instance GHC.Generics.Generic Domain.PaintingsResponse
instance GHC.Read.Read Domain.PaintingsResponse
instance GHC.Show.Show Domain.PaintingsResponse
instance GHC.Classes.Eq Domain.PaintingsResponse
instance GHC.Generics.Generic Domain.Painting
instance GHC.Read.Read Domain.Painting
instance GHC.Show.Show Domain.Painting
instance GHC.Classes.Eq Domain.Painting
instance GHC.Generics.Generic Domain.PaintingRow
instance GHC.Read.Read Domain.PaintingRow
instance GHC.Show.Show Domain.PaintingRow
instance GHC.Classes.Eq Domain.PaintingRow
instance GHC.Generics.Generic Domain.School
instance GHC.Read.Read Domain.School
instance GHC.Show.Show Domain.School
instance GHC.Classes.Eq Domain.School
instance GHC.Generics.Generic Domain.Genre
instance GHC.Read.Read Domain.Genre
instance GHC.Show.Show Domain.Genre
instance GHC.Classes.Eq Domain.Genre
instance GHC.Generics.Generic Domain.Concept
instance GHC.Read.Read Domain.Concept
instance GHC.Show.Show Domain.Concept
instance GHC.Classes.Eq Domain.Concept
instance GHC.Generics.Generic Domain.ConceptRow
instance GHC.Read.Read Domain.ConceptRow
instance GHC.Show.Show Domain.ConceptRow
instance GHC.Classes.Eq Domain.ConceptRow
instance GHC.Generics.Generic Domain.ArtistsResponse
instance GHC.Read.Read Domain.ArtistsResponse
instance GHC.Show.Show Domain.ArtistsResponse
instance GHC.Classes.Eq Domain.ArtistsResponse
instance GHC.Generics.Generic Domain.ConceptNameRow
instance GHC.Read.Read Domain.ConceptNameRow
instance GHC.Show.Show Domain.ConceptNameRow
instance GHC.Classes.Eq Domain.ConceptNameRow
instance GHC.Generics.Generic Domain.ConceptNamesResponse
instance GHC.Read.Read Domain.ConceptNamesResponse
instance GHC.Show.Show Domain.ConceptNamesResponse
instance GHC.Classes.Eq Domain.ConceptNamesResponse
instance Data.Aeson.Types.ToJSON.ToJSON Domain.PaintingsResponse
instance Data.Aeson.Types.FromJSON.FromJSON Domain.PaintingsResponse
instance Data.Aeson.Types.ToJSON.ToJSON Domain.Painting
instance Data.Aeson.Types.FromJSON.FromJSON Domain.Painting
instance Database.PostgreSQL.Simple.FromRow.FromRow Domain.PaintingRow
instance Data.Aeson.Types.ToJSON.ToJSON Domain.School
instance Data.Aeson.Types.FromJSON.FromJSON Domain.School
instance Database.PostgreSQL.Simple.FromField.FromField Domain.School
instance Database.PostgreSQL.Simple.ToField.ToField Domain.School
instance Data.Aeson.Types.ToJSON.ToJSON Domain.Genre
instance Data.Aeson.Types.FromJSON.FromJSON Domain.Genre
instance Database.PostgreSQL.Simple.FromField.FromField Domain.Genre
instance Database.PostgreSQL.Simple.ToField.ToField Domain.Genre
instance Data.Aeson.Types.ToJSON.ToJSON Domain.Concept
instance Data.Aeson.Types.FromJSON.FromJSON Domain.Concept
instance Database.PostgreSQL.Simple.FromRow.FromRow Domain.ConceptRow
instance Data.Aeson.Types.ToJSON.ToJSON Domain.ArtistsResponse
instance Data.Aeson.Types.FromJSON.FromJSON Domain.ArtistsResponse
instance Data.Aeson.Types.ToJSON.ToJSON Domain.ConceptNameRow
instance Data.Aeson.Types.FromJSON.FromJSON Domain.ConceptNameRow
instance Database.PostgreSQL.Simple.FromRow.FromRow Domain.ConceptNameRow
instance Data.Aeson.Types.ToJSON.ToJSON Domain.ConceptNamesResponse
instance Data.Aeson.Types.FromJSON.FromJSON Domain.ConceptNamesResponse

module BuildQuery
data Constraint
Constraint :: String -> [String] -> Constraint
[column] :: Constraint -> String
[values] :: Constraint -> [String]
newtype ConstraintsInfo
ConstraintsInfo :: [Constraint] -> ConstraintsInfo
[constraints] :: ConstraintsInfo -> [Constraint]
isConceptConstraint :: Constraint -> Bool
isPaintingConstraint :: Constraint -> Bool
type ParameterizedQuery = (Query, [In [String]])
noConstraintsBase :: String
base :: [Constraint] -> String
type Snippet = (String, In [String])
conceptSnippet :: Constraint -> Snippet
paintingSnippet :: Constraint -> Snippet
buildQuery :: [Constraint] -> ParameterizedQuery
c1 :: Constraint
c2 :: Constraint
cs :: [Constraint]
sampleQuery :: ParameterizedQuery
instance GHC.Generics.Generic BuildQuery.ConstraintsInfo
instance GHC.Read.Read BuildQuery.ConstraintsInfo
instance GHC.Show.Show BuildQuery.ConstraintsInfo
instance GHC.Classes.Eq BuildQuery.ConstraintsInfo
instance GHC.Generics.Generic BuildQuery.Constraint
instance GHC.Read.Read BuildQuery.Constraint
instance GHC.Show.Show BuildQuery.Constraint
instance GHC.Classes.Eq BuildQuery.Constraint
instance Data.Aeson.Types.ToJSON.ToJSON BuildQuery.ConstraintsInfo
instance Data.Aeson.Types.FromJSON.FromJSON BuildQuery.ConstraintsInfo
instance Data.Aeson.Types.ToJSON.ToJSON BuildQuery.Constraint
instance Data.Aeson.Types.FromJSON.FromJSON BuildQuery.Constraint

module App
type DBConnectionString = ByteString
type API = "artists" :> Get '[JSON] ArtistsResponse :<|> "concepts" :> Get '[JSON] ConceptNamesResponse :<|> "paintings" :> Get '[JSON] PaintingsResponse :<|> "query" :> ReqBody '[JSON] ConstraintsInfo :> Post '[JSON] PaintingsResponse
api :: Proxy API
server :: Pool Connection -> Server API
runApp :: Int -> Pool Connection -> IO ()
mkApp :: Pool Connection -> IO Application
initConnectionPool :: DBConnectionString -> IO (Pool Connection)
x :: IO String
runMyQuery :: IO ()
